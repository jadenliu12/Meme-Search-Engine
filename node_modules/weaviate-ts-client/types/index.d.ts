import { GraphQL } from './graphql';
import { Schema } from './schema';
import { Data } from './data';
import { Classifications } from './classifications';
import { Batch } from './batch';
import { Misc } from './misc';
import { C11y } from './c11y';
import { Backup } from './backup';
import { Cluster } from './cluster';
import { ApiKey, AuthAccessTokenCredentials, AuthClientCredentials, AuthUserPasswordCredentials, OidcAuthenticator } from './connection/auth';
import { EmbeddedDB, EmbeddedOptions } from './embedded';
export interface ConnectionParams {
    authClientSecret?: AuthClientCredentials | AuthAccessTokenCredentials | AuthUserPasswordCredentials;
    apiKey?: ApiKey;
    host: string;
    scheme: string;
    headers?: HeadersInit;
    embedded?: EmbeddedOptions;
}
export interface WeaviateClient {
    graphql: GraphQL;
    schema: Schema;
    data: Data;
    classifications: Classifications;
    batch: Batch;
    misc: Misc;
    c11y: C11y;
    backup: Backup;
    cluster: Cluster;
    embedded?: EmbeddedDB;
    oidcAuth?: OidcAuthenticator;
}
declare const app: {
    client: (params: ConnectionParams) => WeaviateClient;
    ApiKey: typeof ApiKey;
    AuthUserPasswordCredentials: typeof AuthUserPasswordCredentials;
    AuthAccessTokenCredentials: typeof AuthAccessTokenCredentials;
    AuthClientCredentials: typeof AuthClientCredentials;
    EmbeddedOptions: typeof EmbeddedOptions;
};
export default app;
export * from './openapi/types';
export * from './graphql';
export * from './schema';
export * from './data';
export * from './classifications';
export * from './batch';
export * from './misc';
export * from './c11y';
export * from './backup';
export * from './cluster';
export * from './connection';
export * from './embedded';
