import { NearTextArgs } from './nearText';
import { NearVectorArgs } from './nearVector';
import { Bm25Args } from './bm25';
import { HybridArgs } from './hybrid';
import { NearObjectArgs } from './nearObject';
import { NearImageArgs } from './nearImage';
import { AskArgs } from './ask';
import { GroupArgs } from './group';
import { SortArgs } from './sort';
import Connection from '../connection';
import { CommandBase } from '../validation/commandBase';
import { WhereFilter } from '../openapi/types';
import { GenerateArgs } from './generate';
export default class GraphQLGetter extends CommandBase {
    private after?;
    private askString?;
    private bm25String?;
    private className?;
    private fields?;
    private groupString?;
    private hybridString?;
    private includesNearMediaFilter;
    private limit?;
    private nearImageString?;
    private nearObjectString?;
    private nearTextString?;
    private nearVectorString?;
    private offset?;
    private sortString?;
    private whereString?;
    private generateString?;
    constructor(client: Connection);
    withFields: (fields: string) => this;
    withClassName: (className: string) => this;
    withAfter: (id: string) => this;
    withGroup: (args: GroupArgs) => this;
    withWhere: (whereObj: WhereFilter) => this;
    withNearText: (args: NearTextArgs) => this;
    withBm25: (args: Bm25Args) => this;
    withHybrid: (args: HybridArgs) => this;
    withNearObject: (args: NearObjectArgs) => this;
    withAsk: (askObj: AskArgs) => this;
    withNearImage: (args: NearImageArgs) => this;
    withNearVector: (args: NearVectorArgs) => this;
    withLimit: (limit: number) => this;
    withOffset: (offset: number) => this;
    withSort: (args: SortArgs[]) => this;
    withGenerate: (args: GenerateArgs) => this;
    validateIsSet: (prop: string | undefined | null, name: string, setter: string) => void;
    validate: () => void;
    do: () => Promise<{
        data: any;
    }>;
}
