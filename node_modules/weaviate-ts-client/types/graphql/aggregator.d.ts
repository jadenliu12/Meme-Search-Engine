import { NearTextArgs } from './nearText';
import { NearVectorArgs } from './nearVector';
import { NearObjectArgs } from './nearObject';
import Connection from '../connection';
import { CommandBase } from '../validation/commandBase';
import { WhereFilter } from '../openapi/types';
export default class Aggregator extends CommandBase {
    private className?;
    private fields?;
    private groupBy?;
    private includesNearMediaFilter;
    private limit?;
    private nearObjectString?;
    private nearTextString?;
    private nearVectorString?;
    private objectLimit?;
    private whereString?;
    constructor(client: Connection);
    withFields: (fields: string) => this;
    withClassName: (className: string) => this;
    withWhere: (where: WhereFilter) => this;
    withNearText: (args: NearTextArgs) => this;
    withNearObject: (args: NearObjectArgs) => this;
    withNearVector: (args: NearVectorArgs) => this;
    withObjectLimit: (objectLimit: number) => this;
    withLimit: (limit: number) => this;
    withGroupBy: (groupBy: string[]) => this;
    validateGroup: () => void;
    validateIsSet: (prop: string | undefined | null, name: string, setter: string) => void;
    validate: () => void;
    do: () => Promise<{
        data: any;
    }>;
}
